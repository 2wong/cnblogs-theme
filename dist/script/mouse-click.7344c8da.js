"use strict";(self.webpackChunkcnblogs_theme=self.webpackChunkcnblogs_theme||[]).push([["mouse-click"],{"./src/components/mouse/click.js":
/*!***************************************!*\
  !*** ./src/components/mouse/click.js ***!
  \***************************************/function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ main; }\n/* harmony export */ });\n/**\r\n * UPDATES AND DOCS AT: https://github.com/wangyang0210\r\n * https://www.cnblogs.com/wangyang0210/\r\n * @author: WangYang, wangyang.0210@foxmail.com\r\n * @Date 2022-08-27 20:29\r\n * ----------------------------------------------\r\n * @describe: 鼠标粒子点击特效\r\n */\r\n\r\nfunction main(_) {\r\n    class Circle {\r\n        constructor({origin, speed, color, angle, context}) {\r\n            this.origin = origin\r\n            this.position = {\r\n                ...this.origin\r\n            }\r\n            this.color = color\r\n            this.speed = speed\r\n            this.angle = angle\r\n            this.context = context\r\n            this.renderCount = 0\r\n        }\r\n\r\n        draw() {\r\n            this.context.fillStyle = this.color\r\n            this.context.beginPath()\r\n            this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)\r\n            this.context.fill()\r\n        }\r\n\r\n        move() {\r\n            this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x\r\n            this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)\r\n            this.renderCount++\r\n        }\r\n    }\r\n\r\n    class Boom {\r\n        constructor({origin, context, circleCount = 10, area}) {\r\n            this.origin = origin\r\n            this.context = context\r\n            this.circleCount = circleCount\r\n            this.area = area\r\n            this.stop = false\r\n            this.circles = []\r\n        }\r\n\r\n        randomArray(range) {\r\n            const length = range.length\r\n            const randomIndex = Math.floor(length * Math.random())\r\n            return range[randomIndex]\r\n        }\r\n\r\n        randomColor() {\r\n            const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\r\n            return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(\r\n                range) + this.randomArray(range) + this.randomArray(range)\r\n        }\r\n\r\n        randomRange(start, end) {\r\n            return (end - start) * Math.random() + start\r\n        }\r\n\r\n        init() {\r\n            for (let i = 0; i < this.circleCount; i++) {\r\n                const circle = new Circle({\r\n                    context: this.context,\r\n                    origin: this.origin,\r\n                    color: this.randomColor(),\r\n                    angle: this.randomRange(Math.PI - 1, Math.PI + 1),\r\n                    speed: this.randomRange(1, 6)\r\n                })\r\n                this.circles.push(circle)\r\n            }\r\n        }\r\n\r\n        move() {\r\n            this.circles.forEach((circle, index) => {\r\n                if (circle.position.x > this.area.width || circle.position.y > this.area.height) {\r\n                    return this.circles.splice(index, 1)\r\n                }\r\n                circle.move()\r\n            })\r\n            if (this.circles.length == 0) this.stop = true\r\n        }\r\n\r\n        draw() {\r\n            this.circles.forEach(circle => circle.draw())\r\n        }\r\n    }\r\n\r\n    class CursorSpecialEffects {\r\n        constructor() {\r\n            this.computerCanvas = document.createElement('canvas')\r\n            this.renderCanvas = document.createElement('canvas')\r\n\r\n            this.computerContext = this.computerCanvas.getContext('2d')\r\n            this.renderContext = this.renderCanvas.getContext('2d')\r\n\r\n            this.globalWidth = window.innerWidth\r\n            this.globalHeight = window.innerHeight\r\n\r\n            this.booms = []\r\n            this.running = false\r\n        }\r\n\r\n        handleMouseDown(e) {\r\n            const boom = new Boom({\r\n                origin: {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                },\r\n                context: this.computerContext,\r\n                area: {\r\n                    width: this.globalWidth,\r\n                    height: this.globalHeight\r\n                }\r\n            })\r\n            boom.init()\r\n            this.booms.push(boom)\r\n            this.running || this.run()\r\n        }\r\n\r\n        handlePageHide() {\r\n            this.booms = []\r\n            this.running = false\r\n        }\r\n\r\n        init() {\r\n            const style = this.renderCanvas.style\r\n            style.position = 'fixed'\r\n            style.top = style.left = 0\r\n            style.zIndex = '999999999999999999999999999999999999999999'\r\n            style.pointerEvents = 'none'\r\n\r\n            style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth\r\n            style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight\r\n\r\n            document.body.append(this.renderCanvas)\r\n\r\n            window.addEventListener('mousedown', this.handleMouseDown.bind(this))\r\n            window.addEventListener('pagehide', this.handlePageHide.bind(this))\r\n        }\r\n\r\n        run() {\r\n            this.running = true\r\n            if (this.booms.length == 0) {\r\n                 this.running = false\r\n                 return\r\n            }\r\n\r\n            requestAnimationFrame(this.run.bind(this))\r\n\r\n            this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\r\n            this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)\r\n\r\n            this.booms.forEach((boom, index) => {\r\n                if (boom.stop) {\r\n                    return this.booms.splice(index, 1)\r\n                }\r\n                boom.move()\r\n                boom.draw()\r\n            })\r\n            this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)\r\n        }\r\n    }\r\n\r\n    const cursorSpecialEffects = new CursorSpecialEffects()\r\n    cursorSpecialEffects.init()\r\n}\r\n\n\n//# sourceURL=webpack://cnblogs-theme/./src/components/mouse/click.js?")}}]);